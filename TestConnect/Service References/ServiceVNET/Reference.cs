//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestConnect.ServiceVNET {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://ws.sms.vnet.com", ConfigurationName="ServiceVNET.smsapi")]
    public interface smsapi {
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.DataContractFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="sentDataReturn")]
        string sentData(string datamsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="sentDataReturn")]
        System.Threading.Tasks.Task<string> sentDataAsync(string datamsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.DataContractFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="checkMessageReturn")]
        string checkMessage(string username, string password, string hash_message);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="checkMessageReturn")]
        System.Threading.Tasks.Task<string> checkMessageAsync(string username, string password, string hash_message);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.DataContractFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getDlrReturn")]
        string getDlr(string username, string password, string msgid);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getDlrReturn")]
        System.Threading.Tasks.Task<string> getDlrAsync(string username, string password, string msgid);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.DataContractFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="sentMultiReturn")]
        string sentMulti(string datamsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="sentMultiReturn")]
        System.Threading.Tasks.Task<string> sentMultiAsync(string datamsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.DataContractFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="SentReturn")]
        long Sent(string username, string password, string source_addr, string dest_addr, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="SentReturn")]
        System.Threading.Tasks.Task<long> SentAsync(string username, string password, string source_addr, string dest_addr, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.DataContractFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getBalanceReturn")]
        long getBalance(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getBalanceReturn")]
        System.Threading.Tasks.Task<long> getBalanceAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.DataContractFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getReportDayReturn")]
        string getReportDay(string username, string password, string dayReport);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getReportDayReturn")]
        System.Threading.Tasks.Task<string> getReportDayAsync(string username, string password, string dayReport);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface smsapiChannel : TestConnect.ServiceVNET.smsapi, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class smsapiClient : System.ServiceModel.ClientBase<TestConnect.ServiceVNET.smsapi>, TestConnect.ServiceVNET.smsapi {
        
        public smsapiClient() {
        }
        
        public smsapiClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public smsapiClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public smsapiClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public smsapiClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string sentData(string datamsg) {
            return base.Channel.sentData(datamsg);
        }
        
        public System.Threading.Tasks.Task<string> sentDataAsync(string datamsg) {
            return base.Channel.sentDataAsync(datamsg);
        }
        
        public string checkMessage(string username, string password, string hash_message) {
            return base.Channel.checkMessage(username, password, hash_message);
        }
        
        public System.Threading.Tasks.Task<string> checkMessageAsync(string username, string password, string hash_message) {
            return base.Channel.checkMessageAsync(username, password, hash_message);
        }
        
        public string getDlr(string username, string password, string msgid) {
            return base.Channel.getDlr(username, password, msgid);
        }
        
        public System.Threading.Tasks.Task<string> getDlrAsync(string username, string password, string msgid) {
            return base.Channel.getDlrAsync(username, password, msgid);
        }
        
        public string sentMulti(string datamsg) {
            return base.Channel.sentMulti(datamsg);
        }
        
        public System.Threading.Tasks.Task<string> sentMultiAsync(string datamsg) {
            return base.Channel.sentMultiAsync(datamsg);
        }
        
        public long Sent(string username, string password, string source_addr, string dest_addr, string message) {
            return base.Channel.Sent(username, password, source_addr, dest_addr, message);
        }
        
        public System.Threading.Tasks.Task<long> SentAsync(string username, string password, string source_addr, string dest_addr, string message) {
            return base.Channel.SentAsync(username, password, source_addr, dest_addr, message);
        }
        
        public long getBalance(string username, string password) {
            return base.Channel.getBalance(username, password);
        }
        
        public System.Threading.Tasks.Task<long> getBalanceAsync(string username, string password) {
            return base.Channel.getBalanceAsync(username, password);
        }
        
        public string getReportDay(string username, string password, string dayReport) {
            return base.Channel.getReportDay(username, password, dayReport);
        }
        
        public System.Threading.Tasks.Task<string> getReportDayAsync(string username, string password, string dayReport) {
            return base.Channel.getReportDayAsync(username, password, dayReport);
        }
    }
}
